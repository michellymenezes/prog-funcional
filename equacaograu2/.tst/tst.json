{
  "files": {
    "test.js": {
      "category": "public",
      "data": "// m\u00f3dulos node\nconst assert = require('assert');\nconst fs = require('fs');\n\nprocess.on('uncaughtException', function (e) {\n    console.log(e);\n});\n\n// arquivo a testar \u00e9 inclu\u00eddo como string... \n//eval(fs.readFileSync('polinomios.js').toString());\nvar cut = process.argv[process.argv.length - 1];\nif (!cut.endsWith('equacoes.js')) {\n    cut = 'equacoes.js';\n};\n\nconst original = fs.readFileSync(cut, 'utf8');\nconst linhas = original.split(/\\r?\\n/);\nconst uteis = linhas.map(l => l.replace(/# .*: .*$|####$/, ''));\nconst code = uteis.join('\\n');\neval(code);\n\ndescribe('eq2grau', function (){\n\n    it('exemplo 1 do texto', function () {\n        assert.deepEqual(eq2grau({a:1, b:-5, c:6}), {delta: 1.0, x1: 3.0, x2: 2.0});\n    });\n\n    it('exemplo 2 do texto', function () {\n        assert.deepEqual(eq2grau({a:2, b:8, c:-24}), {delta: 256.0, x1: 2.0, x2: -6.0});\n    });\n\n    it('similar aos exemplos', function () {\n        assert.deepEqual(eq2grau({a:1, b:-1, c:-30}), {delta: 121.0, x1: 6.0, x2: -5.0});\n    });\n\n    it('n\u00e3o produz x2 quando delta \u00e9 zero', function () {\n        assert.deepEqual(eq2grau({a:1, b:8, c:16}), {delta: 0.0, x1: -4.0});\n    });\n\n    it('n\u00e3o produz nem x1, nem x2 quando delta \u00e9 negativo', function () {\n        assert.deepEqual(eq2grau({a:10, b:6, c:10}), {delta: -364.0});\n    });\n\n});\n"
    },
    "runner.js": {
      "category": "public",
      "data": "var Mocha = require('mocha'),\n    fs = require('fs'),\n    path = require('path');\n\nvar tests_script = path.join(__dirname, 'test.js');\n\nvar files = fs.readdirSync(__dirname).filter(function(file){\n    // Only keep the .js files\n    return file.substr(-3) === '.js';\n});\n\nfiles.forEach(function () {\n    // create quiet mocha instance\n    var mocha = new Mocha({ reporter: function () {} }) // no logs\n\n    // add test script to mocha instance\n    mocha.addFile(tests_script);\n    mocha.run()\n        .on('pass', function(test) {\n            process.stdout.write(\".\");\n        })\n        .on('fail', function(test, err) {\n            process.stdout.write(\"f\");\n        })\n        .on('end', function(test, err) {\n            process.stdout.write(\"\\n\");\n        });\n});\n"
    },
    "test.py": {
      "category": "public",
      "data": ""
    },
    "equacoes.js": {
      "category": "answer",
      "data": "function eq2grau(coefs) {\n  const resposta = {}\n\n  resposta.delta = (coefs.b * coefs.b) - (4 * coefs.a * coefs.c)\n\n  if(resposta.delta >= 0){\n    resposta.x1 = (-Number(coefs.b) + Math.sqrt(resposta.delta))/(2 * coefs.a)\n\n    if(resposta.delta > 0){\n      resposta.x2 = (-Number(coefs.b) - Math.sqrt(resposta.delta))/(2 * coefs.a)\n    }\n  }\n\n  return resposta\n}\n",
      "name": "equacoes.js"
    }
  },
  "kind": "assignment",
  "name": null,
  "checksum": "7b8099873b20a389a47fa2462be83295",
  "iid": 5218523718615040,
  "activity_revision": "1.0.1"
}