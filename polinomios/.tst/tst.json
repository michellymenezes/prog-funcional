{
  "files": {
    "test.js": {
      "category": "public",
      "data": "// m\u00f3dulos node\nconst assert = require('assert');\nconst fs = require('fs');\n\n// arquivo a testar \u00e9 inclu\u00eddo como string... \neval(fs.readFileSync('polinomios.js').toString());\n\n// importando polinomio do m\u00f3dulo\nconst pol = polinomios().polinomio;\n\n// constru\u00e7\u00e3o de polinomios (os comments abaixo n\u00e3o s\u00e3o a sa\u00edda do toString!)\nconst p1 = pol(3, 2); // 3x2\nconst p2 = pol(5, 2, -3, 3, 10, 1, -2, 0); // 5x2 - 3x3 + 10x - 2\nconst p3 = pol(3, 3, 4, 1, -5, 0); // 3x3 + 4x - 5\nconst p4 = pol(1, 2, 2, 2); // x2 + 2x2\nconst p5 = pol(1, 2, -2, 2); // x2 - 2x2\nconst p6 = pol(0, 2, 1, 3); // x3 (mas criado a partir de 0x2 + 1x3)\n\ndescribe('polinomio', function (){\n\n    it('toString para forma textual humanizada', function () {\n        assert.equal(p1.toString(), '3x2');\n        assert.equal(p2.toString(), '5x2 - 3x3 + 10x - 2');\n        assert.equal(p3.toString(), '3x3 + 4x - 5');\n        assert.equal(p4.toString(), 'x2 + 2x2');\n        assert.equal(p5.toString(), 'x2 - 2x2');\n        assert.equal(p6.toString(), 'x3');\n    });\n\n    it('polinomios podem ser aplicados', function () {\n        assert.equal(p1(3), 27); // 3x2 (3) = 3*3^2 == 2*9 == 27\n        assert.equal(p1(4), 48);\n        assert.equal(p3(4), 203);\n        assert.equal(p3(p2(2)), 8283);\n        assert.equal(p4(4), 48);\n        assert.equal(p4(3), 27);\n    });\n\n    it('polinomios podem ser normalizados', function () {\n        assert.equal(p1.normal().toString(), '3x2');\n        assert.equal(p2.normal().toString(), '-3x3 + 5x2 + 10x - 2');\n        assert.equal(p3.normal().toString(), '3x3 + 4x - 5');\n        assert.equal(p4.normal().toString(), '3x2');\n        assert.equal(p5.normal().toString(), '-x2');\n        assert.equal(p6.normal().toString(), 'x3');\n    });\n\n    it('polinomios podem ser comparados uns a outros', function () {\n        assert.equal(p1.igual(p1), true);\n        assert.equal(p1.igual(p4), true);\n    });\n\n});\n"
    },
    "test.py": {
      "category": "public",
      "data": "print \".\"\n"
    },
    "polinomios.js": {
      "category": "answer",
      "data": "function polinomios(){\n\n    function criaP(base, exp, obj, ...resto){\n      if(resto.length === 0){\n        if(base !== undefined & exp !== undefined){\n          obj.elem.push({ base: Math.trunc(base), exp: Math.trunc(exp)})\n        }\n        return obj\n      }\n      if(base !== undefined & exp !== undefined){\n        obj.elem.push({ base: Math.trunc(base), exp: Math.trunc(exp)})\n      }\n      return criaP(resto[0], resto[1], obj, ...resto.slice(2))\n    }\n\n    function toString() {\n      p = this;\n      function aux(p, texto){\n        if(p.length === 0) {\n          if(texto[1] === \"-\") return \"-\" + texto.substring(3);\n          return texto.substring(3);\n        }\n        if(p[0].base === 0) {return aux(p.slice(1), texto)}\n        if(p[0].exp === 0) {return aux(p.slice(1), texto + addSignal(p[0].base, \"\"));}\n        if(p[0].exp === 1) {return aux(p.slice(1), texto + addSignal(p[0].base, \"x\"));}\n\n        return aux(p.slice(1), texto + addSignal(p[0].base, `x${p[0].exp}`));\n      }\n      return aux(p.elem, \"\");\n    }\n\n    function addSignal(n, texto){\n      if(n === 1) return ` + ${texto}`\n      if(n === -1) return ` - ${texto}`\n      if(n > 0) return ` + ${n}${texto}`\n      return ` - ${n*(-1)}${texto}`\n    }\n\n    function normal(){\n      p = this;\n      function aux(lista, atual){\n        if(atual.length === 0) {return polinomio(...lista.reverse());}\n        if(lista[(atual[0].exp*2)] === undefined){\n          lista[(atual[0].exp*2)] = atual[0].exp\n          lista[(atual[0].exp*2) + 1] = atual[0].base\n        }else{\n          lista[(atual[0].exp*2) + 1] += atual[0].base\n        }\n        return aux(lista, atual.slice(1))\n      }\n      return aux([], p.elem)\n    }\n\n    function calcula(x, base, exp, ...resto){\n      function aux(total, base, exp, resto){\n        if(resto.length === 0){\n          if(base !== undefined & exp !== undefined){\n            return total + (base * Math.pow(x, exp));\n          }\n          return total;\n        }\n        if(base !== undefined & exp !== undefined){\n          return aux(total + (base * Math.pow(x, exp)), resto[0], resto[1], resto.slice(2))\n        }\n        return aux(total, resto[0], resto[1], resto.slice(2))\n      }\n\n      return aux(0, base, exp, resto)\n    }\n\n    function igual(p2){\n      return p1.normal().toString() === p2.normal().toString();\n    }\n\n    function soma(p1, p2){\n\n      function aux(lista, resto){\n        if(resto.length === 0) return lista\n        lista.push(resto[0].base)\n        lista.push(resto[0].exp)\n        return aux(lista, resto.slice(1))\n      }\n\n      return polinomio(...aux([], p1.elem).concat(aux([], p2.elem)));\n    }\n\n    function polinomio(base, exp, ...resto){\n        polinomio.prototipo = polinomio.prototipo || {toString, normal,igual, soma};\n\n        const novo = (x) => calcula(x, base, exp, ...resto);\n        novo.elem = criaP(base, exp,{elem:[] }, ...resto).elem;\n        Object.setPrototypeOf(novo, polinomio.prototipo);\n\n        return novo;\n    }\n    return {polinomio}\n}\n",
      "name": "polinomios.js"
    }
  },
  "kind": "assignment",
  "name": null,
  "checksum": "f59bf1c5618e83678e31826239234979",
  "iid": 5287821942194176,
  "activity_revision": "1.0.0"
}