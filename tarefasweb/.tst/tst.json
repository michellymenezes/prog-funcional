{
  "files": {
    "martha.js": {
      "category": "answer",
      "data": "\"use strict\";\n\n// estas vari\u00e1veis capturam os controles existentes na view\n// obs: literalmente n\u00e3o s\u00e3o necess\u00e1rias, j\u00e1 que o browser sempre\n// cria properties em window com os ids declarados na view; contudo,\n// usar tais properties \u00e9 considerado m\u00e1 pr\u00e1tica, dado que \u00e9 origem\n// de muito problema;\nconst listagem = document.getElementById('listagem');\nconst edit_box = document.getElementById('edit_box');\nconst edit_titulo = document.getElementById('edit_titulo');\nconst edit_prioridade = document.getElementById('edit_prioridade');\nconst edit_estimativa = document.getElementById('edit_estimativa');\nconst filtro = document.getElementById('filtro');\nconst num_tarefas = document.getElementById('num_tarefas');\nconst horas_estimadas = document.getElementById('horas_estimadas');\n\n// editing_tarefa referencia o modelo da tarefa sendo editada\n// se for uma tarefa nova, ent\u00e3o editing_tarefa.index \u00e9 undefined;\n// se for uma tarefa existente, ent\u00e3o editing_tarefa.index \u00e9 o \n// \u00edndice da tarefa no modelo lista de tarefas;\nlet editing_tarefa;\n\n// o prot\u00f3tipo da tarefa: o objeto pleno de tarefa; neste caso, trata-se de um\n// objeto bastante simples; na pr\u00e1tica, contudo, \u00e9 comum que acumule mais\n// funcionalidade; em particular, toda a \"l\u00f3gica de neg\u00f3gio\" do objeto em si;\n// observe ainda que se trata de modelo de view (view-model), no sentido em que\n// parte da funcionalidade provida \u00e9 relativa ao mapeamento entre o modelo e a\n// view e n\u00e3o exclusivamente da l\u00f3gica de neg\u00f3cio; em algumas aplica\u00e7\u00f5es \u00e9\n// prefer\u00edvel manter esses dois conjuntos de funcionalidades separadas;\nconst proto_tarefa = {\n    titulo: \"\",\n    prioridade: \"5\",\n    estimativa: \"60\",\n    index: undefined,\n    write: function () {\n        edit_titulo.value = this.titulo;\n        edit_prioridade.value = '' + this.prioridade;\n        edit_estimativa.value = '' + this.estimativa;\n        edit_box.hidden = false;\n    },\n    read: function () {\n        this.titulo = edit_titulo.value;\n        this.prioridade = Number(edit_prioridade.value);\n        this.estimativa = Number(edit_estimativa.value);\n    }\n};\n\n// tarefa(data) \u00e9 um construtor; ele parte de um objeto bruto (apenas dados) e\n// cria a partir dele um objeto pleno com proto_tarefa como prot\u00f3tipo;\nfunction tarefa(data) {\n    const nova = Object.create(proto_tarefa);\n    Object.assign(nova, data);\n    return nova;\n}\n\n// dados brutos que, tipicamente, seriam recebidos do servidor\nconst dados_servidor = [\n    {titulo: 'escrever quest\u00f5es da prova de prog3', prioridade: 3, estimativa: 60},\n    {titulo: 'escrever quest\u00f5es do miniteste de prog1', prioridade: 3, estimativa: 30},\n    {titulo: 'concluir e publicar material de prog3 sobre prog ass\u00edncrona', prioridade: 2, estimativa: 120},\n    {titulo: 'revisar artigo de fulano', prioridade: 1, estimativa: 240},\n    {titulo: 'despachar processo de dispensa disciplina', prioridade: 1, estimativa: 30}\n];\n\n// a vari\u00e1vel tarefas, abaixo, \u00e9 nosso modelo da listagem; inicialmente, \u00e9\n// definida a partir de dados recebidos do servidor, mas de forma que cada\n// tarefa seja um objeto pleno criado pelo construtor tarefa(); a partir da\u00ed \u00e9\n// manipulada pelo usu\u00e1rio, atrav\u00e9s da interface;\nconst tarefas = dados_servidor.map(d => tarefa(d));\n\n// update_listagem() \u00e9 a fun\u00e7\u00e3o de atualiza\u00e7\u00e3o da view; ela deve ser invocada\n// sempre que for preciso sincronizar mudan\u00e7as feitas no model para a view;\n// escreva-a de forma que o html produzido para cada tarefa siga o exemplo\n// abaixo:\n//\n// <div class=\"tarefa\">\n//   <div class=\"btn-trash\" onclick=\"delete_tarefa(<<tarefa.index>>)\">remover tarefa</div>\n//   <span class=\"titulo\" onclick=\"edit_tarefa(<<tarefa.index>>)\"> <<tarefa.titulo>> </span><br>\n//   <span class=\"prioridade\">prioridade: <<tarefa.prioridade>> </span><br>\n//   <span class=\"estimativa\">estimativa: <<tarefa.estimativa>> </span><br>\n// </div>\n//\n// use innerHTML ao inv\u00e9s de manipula\u00e7\u00e3o direta da DOM\nfunction update_listagem() {\n  const pattern = filtro.value;\n  const tarefas_filtradas = tarefas\n                            .map((t, i) => { t.index = i; return t; })\n                            .reverse()\n                            .filter(t => t.titulo.includes(pattern) || t.prioridade === Number(pattern));\n  listagem.innerHTML = tarefas_filtradas\n                       .map(t => `<div class=\"tarefa\">\n                                    <div class=\"btn-trash\" onclick=\"delete_tarefa(${t.index})\">remover tarefa</div>\n                                    <span class=\"titulo\" onclick=\"edit_tarefa(${t.index})\">${t.titulo}</span><br>\n                                    <span class=\"prioridade\">prioridade: ${t.prioridade}</span><br>\n                                    <span class=\"estimativa\">estimativa: ${t.estimativa}</span><br>\n                                  </div>`)\n                       .join('\\n');\n  num_tarefas.innerHTML = '' + tarefas_filtradas.length;\n  horas_estimadas.innerHTML = '' + tarefas_filtradas\n                                   .map(t => t.estimativa)\n                                   .reduce((a, e) => a + e, 0);\n}\n\n// create_tarefa() \u00e9 um controle disponibilizado na view para que o usu\u00e1rio\n// inicie a cria\u00e7\u00e3o de uma nova tarefa; ela cria uma nova tarefa, a sincroniza\n// com a view e posiciona o foco da view no input do t\u00edtulo;\nfunction create_tarefa() {\n  editing_tarefa = tarefa();\n  editing_tarefa.write();\n  edit_titulo.focus();\n}\n\n// edit_tarefa \u00e9 um controle disponibilizado na view para que o usu\u00e1rio inicie\n// a edi\u00e7\u00e3o de uma tarefa existente; ela busca uma tarefa no modelo, a\n// sincroniza com a view, ajusta texto e background da \u00e1rea de edi\u00e7\u00e3o e\n// posiciona o foco da view no input do t\u00edtulo;\nfunction edit_tarefa(i) {\n  editing_tarefa = tarefas[i];\n  editing_tarefa.write();\n  edit_header.innerHTML = `Editando tarefa ${i}`;\n  edit_area.style.background = \"lightgreen\";\n  edit_titulo.focus();\n}\n\n// cancel_edit_tarefa() \u00e9 um controle disponibilizado na view para que o\n// usu\u00e1rio cancele a edi\u00e7\u00e3o de uma tarefa; ela ajusta o texto e o background da\n// \u00e1rea de edi\u00e7\u00e3o e esconde o edit_box;\nfunction cancel_edit_tarefa() {\n  edit_header.innerHTML = `Criar nova tarefa`;\n  edit_area.style.background = \"\";\n  edit_box.hidden = true;\n}\n\n// delete_tarefa(i) \u00e9 um controle disponibilizado na view para que o usu\u00e1rio\n// elimine uma tarefa da listagem; ela elimina a tarefa indicada pelo \u00edndice\n// recebido como argumento, elimina o index da tarefa e sincroniza a view com o\n// modelo;\nfunction delete_tarefa(i) {\n  tarefas[i].index = undefined;\n  tarefas.splice(i, 1);\n  update_listagem();\n}\n\n// save_tarefa() \u00e9 um controle disponibilizado na view para que o usu\u00e1rio salve\n// a tarefa que est\u00e1 sendo editada na lista de tarefas (caso seja uma nova\n// tarefa); ela sincroniza o conte\u00fado da view com o modelo; se a tarefa \u00e9 nova\n// (indicado pelo fato de tarefa.index ser undefined), \u00e9 adicionada \u00e0 listagem;\n// al\u00e9m disso, reconfigura e esconde a \u00e1rea de edi\u00e7\u00e3o;\nfunction save_tarefa() {\n  editing_tarefa.read();\n  if (editing_tarefa.titulo === '') return;\n  if (typeof editing_tarefa.index === 'undefined') {\n    editing_tarefa.index = tarefas.length;\n    tarefas.push(editing_tarefa);\n  }\n\n  update_listagem();\n  edit_header.innerHTML = `Criar nova tarefa`;\n  edit_area.style.background = \"\";\n  edit_box.hidden = true;\n}\n\n// key_pressed() \u00e9 um controle disponibilizado na view; \u00e9 invocado a cada tecla\n// digitada pelo usu\u00e1rio; neste caso, est\u00e1 sendo usado para eliminar caracteres\n// n\u00e3o num\u00e9ricos das entradas que devem ser num\u00e9ricas; al\u00e9m disso, est\u00e1 sendo\n// usado para invocar, indiretamente, o controle save_tarefa() quando o usu\u00e1rio\n// dgitar <Enter>, evitando que precise usar o mouse;\nfunction key_pressed() {\n  if (event.key === 'Enter') save_tarefa();\n  edit_prioridade.value = edit_prioridade.value.replace(/\\D/g, '')\n  edit_estimativa.value = edit_estimativa.value.replace(/\\D/g, '')\n}\n\n// logo na execu\u00e7\u00e3o inicial do script, \u00e9 preciso iniciar sincronizando o\n// modelo de dados e a view;\nupdate_listagem();\n",
      "name": "martha.js"
    },
    "listagem.js": {
      "category": "public",
      "data": "\"use strict\";\n\n// estas vari\u00e1veis capturam os controles existentes na view\n// obs: literalmente n\u00e3o s\u00e3o necess\u00e1rias, j\u00e1 que o browser sempre\n// cria properties em window com os ids declarados na view; contudo,\n// usar tais properties \u00e9 considerado m\u00e1 pr\u00e1tica, dado que \u00e9 origem\n// de muito problema;\nconst listagem = document.getElementById('listagem');\nconst edit_box = document.getElementById('edit_box');\nconst edit_titulo = document.getElementById('edit_titulo');\nconst edit_prioridade = document.getElementById('edit_prioridade');\nconst edit_estimativa = document.getElementById('edit_estimativa');\nconst filtro = document.getElementById('filtro');\nconst num_tarefas = document.getElementById('num_tarefas');\nconst horas_estimadas = document.getElementById('horas_estimadas');\n\n// editing_tarefa referencia o modelo da tarefa sendo editada\n// se for uma tarefa nova, ent\u00e3o editing_tarefa.index \u00e9 undefined;\n// se for uma tarefa existente, ent\u00e3o editing_tarefa.index \u00e9 o \n// \u00edndice da tarefa no modelo lista de tarefas;\nlet editing_tarefa;\n\n// o prot\u00f3tipo da tarefa: o objeto pleno de tarefa; neste caso, trata-se de um\n// objeto bastante simples; na pr\u00e1tica, contudo, \u00e9 comum que acumule mais\n// funcionalidade; em particular, toda a \"l\u00f3gica de neg\u00f3gio\" do objeto em si;\n// observe ainda que se trata de modelo de view (view-model), no sentido em que\n// parte da funcionalidade provida \u00e9 relativa ao mapeamento entre o modelo e a\n// view e n\u00e3o exclusivamente da l\u00f3gica de neg\u00f3cio; em algumas aplica\u00e7\u00f5es \u00e9\n// prefer\u00edvel manter esses dois conjuntos de funcionalidades separadas;\nconst proto_tarefa = {\n    titulo: \"\",\n    prioridade: \"5\",\n    estimativa: \"60\",\n    index: undefined,\n    write: function () {\n        edit_titulo.value = this.titulo;\n        edit_prioridade.value = '' + this.prioridade;\n        edit_estimativa.value = '' + this.estimativa;\n        edit_box.hidden = false;\n    },\n    read: function () {\n        this.titulo = edit_titulo.value;\n        this.prioridade = Number(edit_prioridade.value);\n        this.estimativa = Number(edit_estimativa.value);\n    }\n};\n\n// tarefa(data) \u00e9 um construtor; ele parte de um objeto bruto (apenas dados) e\n// cria a partir dele um objeto pleno com proto_tarefa como prot\u00f3tipo;\nfunction tarefa(data) {\n    // implemente esta fun\u00e7\u00e3o\n}\n\n// dados brutos que, tipicamente, seriam recebidos do servidor\nconst dados_servidor = [\n    {titulo: 'escrever quest\u00f5es da prova de prog3', prioridade: 3, estimativa: 60},\n    {titulo: 'escrever quest\u00f5es do miniteste de prog1', prioridade: 3, estimativa: 30},\n    {titulo: 'concluir e publicar material de prog3 sobre prog ass\u00edncrona', prioridade: 2, estimativa: 120},\n    {titulo: 'revisar artigo de fulano', prioridade: 1, estimativa: 240},\n    {titulo: 'despachar processo de dispensa disciplina', prioridade: 1, estimativa: 30}\n];\n\n// a vari\u00e1vel tarefas, abaixo, \u00e9 nosso modelo da listagem; inicialmente, \u00e9\n// definida a partir de dados recebidos do servidor, mas de forma que cada\n// tarefa seja um objeto pleno criado pelo construtor tarefa(); a partir da\u00ed \u00e9\n// manipulada pelo usu\u00e1rio, atrav\u00e9s da interface;\nconst tarefas = null; // escreva esta linha\n\n// update_listagem() \u00e9 a fun\u00e7\u00e3o de atualiza\u00e7\u00e3o da view; ela deve ser invocada\n// sempre que for preciso sincronizar mudan\u00e7as feitas no model para a view;\n// escreva-a de forma que o html produzido para cada tarefa siga o exemplo\n// abaixo:\n//\n// <div class=\"tarefa\">\n//   <div class=\"btn-trash\" onclick=\"delete_tarefa(<<tarefa.index>>)\">remover tarefa</div>\n//   <span class=\"titulo\" onclick=\"edit_tarefa(<<tarefa.index>>)\"> <<tarefa.titulo>> </span><br>\n//   <span class=\"prioridade\">prioridade: <<tarefa.prioridade>> </span><br>\n//   <span class=\"estimativa\">estimativa: <<tarefa.estimativa>> </span><br>\n// </div>\n//\n// use innerHTML ao inv\u00e9s de manipula\u00e7\u00e3o direta da DOM\nfunction update_listagem() {\n    // implemente esta fun\u00e7\u00e3o\n}\n\n// create_tarefa() \u00e9 um controle disponibilizado na view para que o usu\u00e1rio\n// inicie a cria\u00e7\u00e3o de uma nova tarefa; ela cria uma nova tarefa, a sincroniza\n// com a view e posiciona o foco da view no input do t\u00edtulo;\nfunction create_tarefa() {\n  editing_tarefa = tarefa();\n  editing_tarefa.write();\n  edit_titulo.focus();\n}\n\n// edit_tarefa \u00e9 um controle disponibilizado na view para que o usu\u00e1rio inicie\n// a edi\u00e7\u00e3o de uma tarefa existente; ela busca uma tarefa no modelo, a\n// sincroniza com a view, ajusta texto e background da \u00e1rea de edi\u00e7\u00e3o e\n// posiciona o foco da view no input do t\u00edtulo;\nfunction edit_tarefa(i) {\n  editing_tarefa = tarefas[i];\n  editing_tarefa.write();\n  edit_header.innerHTML = `Editando tarefa ${i}`;\n  edit_area.style.background = \"lightgreen\";\n  edit_titulo.focus();\n}\n\n// cancel_edit_tarefa() \u00e9 um controle disponibilizado na view para que o\n// usu\u00e1rio cancele a edi\u00e7\u00e3o de uma tarefa; ela ajusta o texto e o background da\n// \u00e1rea de edi\u00e7\u00e3o e esconde o edit_box;\nfunction cancel_edit_tarefa() {\n  edit_header.innerHTML = `Criar nova tarefa`;\n  edit_area.style.background = \"\";\n  edit_box.hidden = true;\n}\n\n// delete_tarefa(i) \u00e9 um controle disponibilizado na view para que o usu\u00e1rio\n// elimine uma tarefa da listagem; ela elimina a tarefa indicada pelo \u00edndice\n// recebido como argumento, elimina o index da tarefa e sincroniza a view com o\n// modelo;\nfunction delete_tarefa(i) {\n    // implemente esta fun\u00e7\u00e3o\n}\n\n// save_tarefa() \u00e9 um controle disponibilizado na view para que o usu\u00e1rio salve\n// a tarefa que est\u00e1 sendo editada na lista de tarefas (caso seja uma nova\n// tarefa); ela sincroniza o conte\u00fado da view com o modelo; se a tarefa \u00e9 nova\n// (indicado pelo fato de tarefa.index ser undefined), \u00e9 adicionada \u00e0 listagem;\n// al\u00e9m disso, reconfigura e esconde a \u00e1rea de edi\u00e7\u00e3o;\nfunction save_tarefa() {\n    // implemente esta fun\u00e7\u00e3o\n}\n\n// key_pressed() \u00e9 um controle disponibilizado na view; \u00e9 invocado a cada tecla\n// digitada pelo usu\u00e1rio; neste caso, est\u00e1 sendo usado para eliminar caracteres\n// n\u00e3o num\u00e9ricos das entradas que devem ser num\u00e9ricas; al\u00e9m disso, est\u00e1 sendo\n// usado para invocar, indiretamente, o controle save_tarefa() quando o usu\u00e1rio\n// dgitar <Enter>, evitando que precise usar o mouse;\nfunction key_pressed(event) {\n  if (event.key === 'Enter') save_tarefa();\n  edit_prioridade.value = edit_prioridade.value.replace(/\\D/g, '')\n  edit_estimativa.value = edit_estimativa.value.replace(/\\D/g, '')\n}\n\n// logo na execu\u00e7\u00e3o inicial do script, \u00e9 preciso iniciar sincronizando o\n// modelo de dados e a view;\nupdate_listagem();\n"
    },
    "solucao.js": {
      "category": "public",
      "data": "\"use strict\";\n\n// estas vari\u00e1veis capturam os controles existentes na view\n// obs: literalmente n\u00e3o s\u00e3o necess\u00e1rias, j\u00e1 que o browser sempre\n// cria properties em window com os ids declarados na view; contudo,\n// usar tais properties \u00e9 considerado m\u00e1 pr\u00e1tica, dado que \u00e9 origem\n// de muito problema;\nconst listagem = document.getElementById('listagem');\nconst edit_box = document.getElementById('edit_box');\nconst edit_titulo = document.getElementById('edit_titulo');\nconst edit_prioridade = document.getElementById('edit_prioridade');\nconst edit_estimativa = document.getElementById('edit_estimativa');\nconst filtro = document.getElementById('filtro');\nconst num_tarefas = document.getElementById('num_tarefas');\nconst horas_estimadas = document.getElementById('horas_estimadas');\n\n// editing_tarefa referencia o modelo da tarefa sendo editada\n// se for uma tarefa nova, ent\u00e3o editing_tarefa.index \u00e9 undefined;\n// se for uma tarefa existente, ent\u00e3o editing_tarefa.index \u00e9 o \n// \u00edndice da tarefa no modelo lista de tarefas;\nlet editing_tarefa;\n\n// o prot\u00f3tipo da tarefa: o objeto pleno de tarefa; neste caso, trata-se de um\n// objeto bastante simples; na pr\u00e1tica, contudo, \u00e9 comum que acumule mais\n// funcionalidade; em particular, toda a \"l\u00f3gica de neg\u00f3gio\" do objeto em si;\n// observe ainda que se trata de modelo de view (view-model), no sentido em que\n// parte da funcionalidade provida \u00e9 relativa ao mapeamento entre o modelo e a\n// view e n\u00e3o exclusivamente da l\u00f3gica de neg\u00f3cio; em algumas aplica\u00e7\u00f5es \u00e9\n// prefer\u00edvel manter esses dois conjuntos de funcionalidades separadas;\nconst proto_tarefa = {\n    titulo: \"\",\n    prioridade: \"5\",\n    estimativa: \"60\",\n    index: undefined,\n    write: function () {\n        edit_titulo.value = this.titulo;\n        edit_prioridade.value = '' + this.prioridade;\n        edit_estimativa.value = '' + this.estimativa;\n        edit_box.hidden = false;\n    },\n    read: function () {\n        this.titulo = edit_titulo.value;\n        this.prioridade = Number(edit_prioridade.value);\n        this.estimativa = Number(edit_estimativa.value);\n    }\n};\n\n// tarefa(data) \u00e9 um construtor; ele parte de um objeto bruto (apenas dados) e\n// cria a partir dele um objeto pleno com proto_tarefa como prot\u00f3tipo;\nfunction tarefa(data) {\n    const nova = Object.create(proto_tarefa);\n    Object.assign(nova, data);\n    return nova;\n}\n\n// dados brutos que, tipicamente, seriam recebidos do servidor\nconst dados_servidor = [\n    {titulo: 'escrever quest\u00f5es da prova de prog3', prioridade: 3, estimativa: 60},\n    {titulo: 'escrever quest\u00f5es do miniteste de prog1', prioridade: 3, estimativa: 30},\n    {titulo: 'concluir e publicar material de prog3 sobre prog ass\u00edncrona', prioridade: 2, estimativa: 120},\n    {titulo: 'revisar artigo de fulano', prioridade: 1, estimativa: 240},\n    {titulo: 'despachar processo de dispensa disciplina', prioridade: 1, estimativa: 30}\n];\n\n// a vari\u00e1vel tarefas, abaixo, \u00e9 nosso modelo da listagem; inicialmente, \u00e9\n// definida a partir de dados recebidos do servidor, mas de forma que cada\n// tarefa seja um objeto pleno criado pelo construtor tarefa(); a partir da\u00ed \u00e9\n// manipulada pelo usu\u00e1rio, atrav\u00e9s da interface;\nconst tarefas = dados_servidor.map(d => tarefa(d));\n\n// update_listagem() \u00e9 a fun\u00e7\u00e3o de atualiza\u00e7\u00e3o da view; ela deve ser invocada\n// sempre que for preciso sincronizar mudan\u00e7as feitas no model para a view;\n// escreva-a de forma que o html produzido para cada tarefa siga o exemplo\n// abaixo:\n//\n// <div class=\"tarefa\">\n//   <div class=\"btn-trash\" onclick=\"delete_tarefa(<<tarefa.index>>)\">remover tarefa</div>\n//   <span class=\"titulo\" onclick=\"edit_tarefa(<<tarefa.index>>)\"> <<tarefa.titulo>> </span><br>\n//   <span class=\"prioridade\">prioridade: <<tarefa.prioridade>> </span><br>\n//   <span class=\"estimativa\">estimativa: <<tarefa.estimativa>> </span><br>\n// </div>\n//\n// use innerHTML ao inv\u00e9s de manipula\u00e7\u00e3o direta da DOM\nfunction update_listagem() {\n  const pattern = filtro.value;\n  const tarefas_filtradas = tarefas\n                            .map((t, i) => { t.index = i; return t; })\n                            .reverse()\n                            .filter(t => t.titulo.includes(pattern) || t.prioridade === Number(pattern));\n  listagem.innerHTML = tarefas_filtradas\n                       .map(t => `<div class=\"tarefa\">\n                                    <div class=\"btn-trash\" onclick=\"delete_tarefa(${t.index})\">remover tarefa</div>\n                                    <span class=\"titulo\" onclick=\"edit_tarefa(${t.index})\">${t.titulo}</span><br>\n                                    <span class=\"prioridade\">prioridade: ${t.prioridade}</span><br>\n                                    <span class=\"estimativa\">estimativa: ${t.estimativa}</span><br>\n                                  </div>`)\n                       .join('\\n');\n  num_tarefas.innerHTML = '' + tarefas_filtradas.length;\n  horas_estimadas.innerHTML = '' + tarefas_filtradas\n                                   .map(t => t.estimativa)\n                                   .reduce((a, e) => a + e, 0);\n}\n\n// create_tarefa() \u00e9 um controle disponibilizado na view para que o usu\u00e1rio\n// inicie a cria\u00e7\u00e3o de uma nova tarefa; ela cria uma nova tarefa, a sincroniza\n// com a view e posiciona o foco da view no input do t\u00edtulo;\nfunction create_tarefa() {\n  editing_tarefa = tarefa();\n  editing_tarefa.write();\n  edit_titulo.focus();\n}\n\n// edit_tarefa \u00e9 um controle disponibilizado na view para que o usu\u00e1rio inicie\n// a edi\u00e7\u00e3o de uma tarefa existente; ela busca uma tarefa no modelo, a\n// sincroniza com a view, ajusta texto e background da \u00e1rea de edi\u00e7\u00e3o e\n// posiciona o foco da view no input do t\u00edtulo;\nfunction edit_tarefa(i) {\n  editing_tarefa = tarefas[i];\n  editing_tarefa.write();\n  edit_header.innerHTML = `Editando tarefa ${i}`;\n  edit_area.style.background = \"lightgreen\";\n  edit_titulo.focus();\n}\n\n// cancel_edit_tarefa() \u00e9 um controle disponibilizado na view para que o\n// usu\u00e1rio cancele a edi\u00e7\u00e3o de uma tarefa; ela ajusta o texto e o background da\n// \u00e1rea de edi\u00e7\u00e3o e esconde o edit_box;\nfunction cancel_edit_tarefa() {\n  edit_header.innerHTML = `Criar nova tarefa`;\n  edit_area.style.background = \"\";\n  edit_box.hidden = true;\n}\n\n// delete_tarefa(i) \u00e9 um controle disponibilizado na view para que o usu\u00e1rio\n// elimine uma tarefa da listagem; ela elimina a tarefa indicada pelo \u00edndice\n// recebido como argumento, elimina o index da tarefa e sincroniza a view com o\n// modelo;\nfunction delete_tarefa(i) {\n  tarefas[i].index = undefined;\n  tarefas.splice(i, 1);\n  update_listagem();\n}\n\n// save_tarefa() \u00e9 um controle disponibilizado na view para que o usu\u00e1rio salve\n// a tarefa que est\u00e1 sendo editada na lista de tarefas (caso seja uma nova\n// tarefa); ela sincroniza o conte\u00fado da view com o modelo; se a tarefa \u00e9 nova\n// (indicado pelo fato de tarefa.index ser undefined), \u00e9 adicionada \u00e0 listagem;\n// al\u00e9m disso, reconfigura e esconde a \u00e1rea de edi\u00e7\u00e3o;\nfunction save_tarefa() {\n  editing_tarefa.read();\n  if (editing_tarefa.titulo === '') return;\n  if (typeof editing_tarefa.index === 'undefined') {\n    editing_tarefa.index = tarefas.length;\n    tarefas.push(editing_tarefa);\n  }\n\n  update_listagem();\n  edit_header.innerHTML = `Criar nova tarefa`;\n  edit_area.style.background = \"\";\n  edit_box.hidden = true;\n}\n\n// key_pressed() \u00e9 um controle disponibilizado na view; \u00e9 invocado a cada tecla\n// digitada pelo usu\u00e1rio; neste caso, est\u00e1 sendo usado para eliminar caracteres\n// n\u00e3o num\u00e9ricos das entradas que devem ser num\u00e9ricas; al\u00e9m disso, est\u00e1 sendo\n// usado para invocar, indiretamente, o controle save_tarefa() quando o usu\u00e1rio\n// dgitar <Enter>, evitando que precise usar o mouse;\nfunction key_pressed() {\n  if (event.key === 'Enter') save_tarefa();\n  edit_prioridade.value = edit_prioridade.value.replace(/\\D/g, '')\n  edit_estimativa.value = edit_estimativa.value.replace(/\\D/g, '')\n}\n\n// logo na execu\u00e7\u00e3o inicial do script, \u00e9 preciso iniciar sincronizando o\n// modelo de dados e a view;\nupdate_listagem();\n"
    },
    "listagem.css": {
      "category": "public",
      "data": "body { font-family: 'Roboto', sans-serif; }\ntd { font-size: 110%; }\ntable { margin: 20px 0 20px 0; }\ninput { font-size: 90%; }\n\n.tarefa {\n  margin-bottom: 5px;\n  padding: 10px;\n  border: 1px #bbbbbb solid;\n  border-radius: 10px;\n}\n\n.btn-salvar {\n    border: 1px black solid;\n    border-radius: 15px;\n    padding: 10px;\n    text-align: center;\n    background-color: green;\n    color: white;\n    font-weight: bold;\n    width: 10em;\n    float: right;\n}\n\n.btn-cancelar {\n    border: 1px black solid;\n    border-radius: 15px;\n    padding: 10px;\n    text-align: center;\n    background-color: red;\n    color: white;\n    font-weight: bold;\n    width: 10em;\n    float: right;\n    margin-right: 10px;\n}\n\n#edit_box {\n    overflow: hidden;\n    clear: both;\n}\n\n.btn-trash {\n    border: 1px #777777 solid;\n    border-radius: 15px;\n    padding: 10px;\n    text-align: center;\n    color: #555555;\n    background-color: #fbaaaa;\n    width: 10em;\n    float: right;\n}\n\n\n.titulo {\n  color: #9999ff;\n  font-size: 110%;\n  cursor: pointer;\n}\n\n.estimativa, .prioridade {\n  color: #bbbbbb;\n}\n\n#edit_area {\n    border: 1px #bbbbbb solid;\n    padding: 10px;\n    border-radius: 10px;\n    background-color: lightcyan;\n}\n\n#edit_area > h3 {\n    margin-top: 0;\n    margin-bottom: 0;\n}\n"
    },
    "listagem.html": {
      "category": "public",
      "data": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title></title>\n  <link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\">\n  <link rel=\"stylesheet\" href=\"listagem.css\">\n</head>\n<body>\n  <h1>Tarefas</h1>\n\n  <div id=\"edit_area\">\n    <h3 onclick=\"create_tarefa()\" id=\"edit_header\">Criar nova tarefa</h3>\n\n    <div id=\"edit_box\" hidden=\"true\">\n      <table width=\"100%\">\n        <tr>\n          <td align=\"right\"> Tarefa: </td>\n          <td align=\"left\"> <input id=\"edit_titulo\" type=\"text\" size=\"80\" onkeydown=\"key_pressed(event)\"> </td>\n        </tr>\n        <tr>\n          <td align=\"right\"> Prioridade: </td>\n          <td align=\"left\"> <input id=\"edit_prioridade\" type=\"text\" onkeydown=\"key_pressed(event)\" value=\"5\"> </td>\n        </tr>\n        <tr>\n          <td align=\"right\"> Estimativa de tempo (min): </td>\n          <td align=\"left\"> <input id=\"edit_estimativa\" type=\"text\" onkeydown=\"key_pressed(event)\" value=\"60\"> </td>\n        </tr>\n      </table>\n      <div class=\"btn-salvar\" onclick=\"save_tarefa()\">salvar tarefa</div>\n      <div class=\"btn-cancelar\" onclick=\"cancel_edit_tarefa()\">cancelar</div>\n    </div>\n\n  </div>\n  \n  <table width=\"100%\">\n    <tr>\n      <td align=\"left\"> Filtrar: <input id=\"filtro\" type=\"text\" onkeyup=\"update_listagem()\"> </td>\n      <td align=\"center\"> Total de tarefas: <span id=\"num_tarefas\"></span></td>\n      <td align=\"right\"> Minutos estimados: <span id=\"horas_estimadas\"></span></td>\n    </tr>\n  </table>\n\n  <div id=\"listagem\"></div>\n\n  <script src=\"listagem.js\"></script>\n</body>\n</html>\n"
    }
  },
  "iid": 6110232212144128,
  "kind": "assignment",
  "activity_revision": "1.0.1",
  "name": null
}